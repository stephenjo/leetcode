Number 7, Reverse Integer

requirments/special conditions

- integer is passed to class
- output needs to be integer
- negative integers are accepted, negative sign must be kept
- trailing 0's are to be removed, ex 120 --> 21

code layout:
- check size of integer (needs to be less than 32bit)
(initally misunderstood, the reversed number ust be smaller than 32bit)
- check if 0, if so return 0
- check if negative
- convert integer to string
- reverse 
- remove trailing 0's
- convert back into integer
- add in (-) if originally negative


** FINAL SOLUTION	(There's a faster way to do this I am sure)
class Solution:
    def reverse(self, x: int) -> int:
        #check if x is 0
        if x==0:
            return 0
        else:
            #check if x is negative
            chck=0
            if x<0:
                x=abs(x)
                chck=1

            #remove end 0's
            x = int(str(x).rstrip('0'))

            #reverse x
            res = [int(x) for x in str(x)] 
            res.reverse()

            #convert back to integer
            strng = [str(res) for res in res]
            strng = "".join(strng)
            rev_int = int(strng)
            
            #check if x is larger than 32bit, if so return 0
            #if abs(rev_int) > (0xffffffff): (didn't work?)
            #if abs(rev_int) > 2**31 and rev_int != 2**31 - 1: (works)
            if rev_int.bit_length()>=32:
                return 0
            else:
                #add negative sign if necessary
                if chck==1:
                    rev_int = rev_int*(-1)

                return rev_int
            
        



**First attempt (does not address end 0's)
num = (-12345)
chck=0
if x<0:
    x=abs(x)
    chck=1

res = [int(x) for x in str(x)] 
res.reverse()


strng = [str(res) for res in res]
strng = "".join(strng)
rev_int = int(strng)

# convert back to negative if chck==1
if chck==1:
    rev_int = rev_int*(-1)

print(rev_int)
